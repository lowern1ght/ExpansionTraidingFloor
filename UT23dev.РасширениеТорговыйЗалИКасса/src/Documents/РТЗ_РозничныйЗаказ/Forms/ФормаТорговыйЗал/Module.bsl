#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	ОбщегоНазначенияКлиент.СообщитьПользователю("Оповещение: " + ИмяСобытия);
	//ОбработкаОповещенияНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	АвтоЗаголовок = Ложь;
	
	Если Не УспешноЗаполнитьНастройкамиТемриналаИВернутьСтатус() Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("Ошибка при заполнении настроек, обратитесь в IT-отдел!");
		Возврат;	
	КонецЕсли;
	
	Заголовок = ("Рабочее место менеджера торгового зала / " + "Терминал: <" + ПолучитьНаименоваиеТекущегоТерминала() + ">");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОформитьВозврат(Команда)
	ОформитьВозвратНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура Сформировать()
	Если Объект.Корзина.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВводаПароля", ЭтотОбъект);
	ОткрытьФорму("Документ.РТЗ_РозничныйЗаказ.Форма.ВводПароля",,,,,,
		Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца)
КонецПроцедуры

&НаКлиенте
Процедура Подбор()
	ОткрытьФорму("Обработка.ПодборТоваровВДокументПродажи.Форма", 
				 ЗаполнитьПараметрыПодбораНаСервере(), 
				 ЭтотОбъект, 
				 УникальныйИдентификатор);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ЗаполнитьПараметрыПодбораНаСервере()
	ПараметрыФормы = Новый Структура;
	
	ПараметрЗаголовок = НСтр("ru = 'Подбор товаров в розничный заказ'");
	
	Если ЦенообразованиеВызовСервера.ИспользуетсяЦенообразование25() Тогда
		ПараметрыФормы.Вставить("РежимОтбораДляРозничныхПродаж", Истина);
	Иначе		
		ПараметрыФормы.Вставить("РежимПодбораБезСоглашенийСКлиентами ", Истина);
	КонецЕсли;	
	
	ПараметрыФормы.Вставить("ИспользоватьДатыОтгрузки", 						Ложь);
	ПараметрыФормы.Вставить("РежимПодбораИспользоватьСкладыВТабличнойЧасти", 	Ложь);
	ПараметрыФормы.Вставить("Склад", 											Склад);
	ПараметрыФормы.Вставить("Валюта", 											Валюта);
	ПараметрыФормы.Вставить("ЗапретРедактированияЦены", 						Истина);
	ПараметрыФормы.Вставить("СкрыватьКолонкуВидЦены",                  			Истина);
	ПараметрыФормы.Вставить("ИспользоватьНаборы", 						   		Истина);
	ПараметрыФормы.Вставить("Документ", 							   			Объект.Ссылка);
	ПараметрыФормы.Вставить("ВидЦены", 								   			Объект.ВидЦены);
	ПараметрыФормы.Вставить("Заголовок", 							   			ПараметрЗаголовок);
	ПараметрыФормы.Вставить("ЦенаВключаетНДС", 						   			ЦенаВключаетНДС);
	ПараметрыФормы.Вставить("Дата", 											ОбщегоНазначения.ТекущаяДатаПользователя());
	ПараметрыФормы.Вставить("ВариантАнализаНоменклатурыПродаваемойСовместно", 
					ПредопределенноеЗначение("Перечисление.ВариантыАнализаНоменклатурыПродаваемойСовместно.РозничнаяТорговля"));
					
	Возврат ПараметрыФормы;
КонецФункции

&НаКлиенте
Процедура ПослеЗакрытияПодбора(Результат, ДопПараметры) Экспорт
	//TODO: реалзовать подбор
КонецПроцедуры

&НаСервере
Функция УспешноЗаполнитьНастройкамиТемриналаИВернутьСтатус()
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВидыЦен.Ссылка,
		|	ВидыЦен.ВалютаЦены.Ссылка
		|ИЗ
		|	Справочник.ВидыЦен КАК ВидыЦен";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Объект.ВидЦены = ВыборкаДетальныеЗаписи.Ссылка;
			Склад = Константы.РТЗ_ГруппаСкладовПредприятия.Получить();
			Валюта = Объект.ВидЦены.ПолучитьОбъект().ВалютаЦены.ПолучитьОбъект().Ссылка;
			ОтладкаСообщитьПользователюНастройки();
	КонецЦикла;
	
	//Если что-то не заполнилось, тогда ошибка при открытии
	Если Не ЗначениеЗаполнено(Склад) 
	Или  Не ЗначениеЗаполнено(Валюта)
	Или  Не ЗначениеЗаполнено(Объект.ВидЦены) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

&НаСервере
Процедура ОтладкаСообщитьПользователюНастройки()
	ОбщегоНазначения.СообщитьПользователю("Склад: " + Склад + ", ВидЦены: " + Объект.ВидЦены + ", Валюта: " + Валюта);
КонецПроцедуры

&НаСервере
Процедура ОформитьВозвратНаСервере()
	//TODO: Вставить содержимое обработчика
КонецПроцедуры

// Возвращает имя текущего пользоватя
// Возвращаемое значение:
//  - Строка
&НаСервере
Функция ПолучитьНаименоваиеТекущегоТерминала()
	Возврат ПользователиИнформационнойБазы.ТекущийПользователь().Имя;
КонецФункции

//Вызывается в случае успешных проверок и нахождения менеджера
// Параметры:
//  Менеджер - СправочникСсылка.Пользователи - ссылка на справочник пользователи
// Возвращаемое значение:
//  - ТабличныйДокумент
&НаСервере
Функция СформироватьНаСервере(Менеджер)	
	ДокументЗаказа = Документы.РТЗ_РозничныйЗаказ.СоздатьДокумент();
	ДокументЗаказа.Менеджер = Менеджер;
	ДокументЗаказа.Корзина.Загрузить(Объект.Корзина.Выгрузить());
	ДокументЗаказа.ВидЦены = Объект.ВидЦены;
	ДокументЗаказа.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
	Возврат ДокументЗаказа.ПечататьЗаказСервер();
КонецФункции

// Обработка оповещения
// Параметры:
//  ПользовательСсылка - СправочникСсылка.Пользователи - Ссылка на менеджера
//  ДопПараметры - Неопределено
&НаКлиенте
Процедура ПослеЗакрытияВводаПароля(ПользовательСсылка, ДопПараметры = Неопределено) Экспорт
	Если Не ЗначениеЗаполнено(ПользовательСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	//@skip-check use-non-recommended-method
	СформироватьНаСервере(ПользовательСсылка)
		.Показать("Заказ_"+ТекущаяДата());
	Объект.Корзина.Очистить();
КонецПроцедуры

#КонецОбласти
