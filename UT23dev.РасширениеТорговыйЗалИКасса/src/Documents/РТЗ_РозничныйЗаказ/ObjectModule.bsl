#Если Сервер Тогда

#Область ОбработчикиСобытий

Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗаказа) Тогда
		ИдентификаторЗаказа = Новый УникальныйИдентификатор();
	КонецЕсли;
КонецПроцедуры

Процедура ПередУдалением(Отказ)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
	
#Область СлужебныеПроцедурыИФункции

//Функция печати табличного документа розничного заказа
//
// Возвращаемое значение:
//  - ТабличныйДокумент
Функция ПечататьЗаказСервер() Экспорт
	Перем Сумма;
	
	ТабличныйДокумент = Новый ТабличныйДокумент();
	
	Макет = Документы.РТЗ_РозничныйЗаказ.ПолучитьМакет("Заказ");
	ОбластьШапка = Макет.ПолучитьОбласть("Заказ|Шапка");
	ОбластьСтрока = Макет.ПолучитьОбласть("Заказ|Строка");
	ОбластьПодвал = Макет.ПолучитьОбласть("Заказ|Подвал");
	
	ШтрихкодПустой = ОбластьШапка.Рисунки.Штрихкод;
	РисунокШтрихкода = ПолучитьШтрихкод(ШтрихкодПустой.Ширина + ШтрихкодПустой.Ширина * 0.25, 
										ШтрихкодПустой.Высота + ШтрихкодПустой.Высота * 0.25,
										Неопределено, 4);
										
	ОбластьШапка.Рисунки.Штрихкод.Картинка = РисунокШтрихкода;
	ОбластьШапка.Параметры.НомерЗаказа = "Заказ №" + Номер;
	ТабличныйДокумент.Вывести(ОбластьШапка);
	
	//Вывод строка документа
	Для Каждого Элемент Из Корзина Цикл
		ОбластьСтрока.Параметры.Артикул = Элемент.Номенклатура.Артикул;
		ОбластьСтрока.Параметры.Номенклатура = Элемент.Номенклатура.Наименование;
		ОбластьСтрока.Параметры.Количество = Строка(Элемент.Количество) + " " + Элемент.Номенклатура.ЕдиницаИзмерения.Наименование;
		ОбластьСтрока.Параметры.Цена = Строка(Элемент.Цена) + " " + "руб.";
		Сумма = Сумма + Элемент.Цена * Элемент.Количество;
		ТабличныйДокумент.Вывести(ОбластьСтрока);
	КонецЦикла;
	
	ОбластьПодвал.Параметры.Сумма = Строка(Сумма) + " " + "руб.";
	ТабличныйДокумент.Вывести(ОбластьПодвал);
	
	Наименование = "ЗаказРозничный_"+Номер;
	ТабличныйДокумент.ИспользуемоеИмяФайла = Наименование;
	ТабличныйДокумент.ИмяСохраненияПоложенияОкна = Наименование;
	ТабличныйДокумент.ТолькоПросмотр = Истина;
	ТабличныйДокумент.ОтображатьСетку = Ложь;
	ТабличныйДокумент.АвтоМасштаб = Ложь;
	Возврат ТабличныйДокумент;
КонецФункции

// Получает изображение штрихкода
// 
// Параметры:
//  ШиринаШтрихкода - Число - значение ширины штрихкода
//  ВысотаШтрихкода - Число - значение высоты штрихкода
//  ЗначШтрихкод - Строка - Входные данные
//  ЗначТипШтрихкода - Число - тип штрих кода по документации
//  
//  Возвращаемое значение:
//   - Картинка
Функция ПолучитьШтрихкод(ШиринаШтрихкода, ВысотаШтрихкода, ЗначШтрихкод = Неопределено, ЗначТипШтрихкода) Экспорт
	ПараметрыШтрихкода = ГенерацияШтрихкода.ПараметрыГенерацииШтрихкода();
	ПараметрыШтрихкода.Ширина = ШиринаШтрихкода;
	ПараметрыШтрихкода.Высота = ВысотаШтрихкода;
	ПараметрыШтрихкода.ТипКода = ЗначТипШтрихкода;
	ПараметрыШтрихкода.Штрихкод = ИдентификаторЗаказа;
	ПараметрыШтрихкода.ПрозрачныйФон = Истина;
	ПараметрыШтрихкода.УровеньКоррекцииQR = 2;
	ПараметрыШтрихкода.ОтображатьТекст = Ложь;
	ПараметрыШтрихкода.Масштабировать = Истина;
	ПараметрыШтрихкода.СохранятьПропорции = Истина;
	ПараметрыШтрихкода.ВертикальноеВыравнивание  = 1;
	ПараметрыШтрихкода.GS1DatabarКоличествоСтрок = 1;
	ПараметрыШтрихкода.ТипВходныхДанных = 0;
	
	РезультатШтрихкод = ГенерацияШтрихкода.ИзображениеШтрихкода(ПараметрыШтрихкода);

	Возврат РезультатШтрихкод.Картинка;
КонецФункции

#КонецОбласти

#КонецЕсли