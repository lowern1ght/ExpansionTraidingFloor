
#Область ОбработчикиСобытий

#Если Сервер Тогда

Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВидЦены) Или Не ЗначениеЗаполнено(Менеджер) Тогда
		ВызватьИсключение "Не заполнены необходимые реквизиты";
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередУдалением(Отказ)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры

#КонецЕсли

#КонецОбласти
	
#Область СлужебныеПроцедурыИФункции

#Если Сервер Тогда

// Параметры:
//  ТаблицаКорзина - ТаблицаЗначений
// Возвращаемое значение:
// - ТаблицаЗначений
Функция ЗаполнитьКолонкиЦенаИСумма(ТаблицаКорзина)
	
	Если Не ЗначениеЗаполнено(ТаблицаКорзина) Тогда
		ВызватьИсключение "Не заполнена таблица корзина";
	КонецЕсли;
	
	Если ТаблицаКорзина.Количество() = 0 Тогда
		ВызватьИсключение "Пустая корзина";
	КонецЕсли;
	
	Если ТаблицаКорзина.Колонки.Найти("Сумма") = Неопределено Тогда
		ТаблицаКорзина.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"), "Сумма", Неопределено);
	КонецЕсли;
	
	Если ТаблицаКорзина.Колонки.Найти("Цена") = Неопределено Тогда
		ТаблицаКорзина.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число"), "Цена", Неопределено);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Если ЦенообразованиеВызовСервера.ИспользуетсяЦенообразование25() Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЦеныНоменклатуры25СрезПоследних.Номенклатура,
		|	ЦеныНоменклатуры25СрезПоследних.ВидЦены,
		|	ЦеныНоменклатуры25СрезПоследних.Цена
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры25.СрезПоследних КАК ЦеныНоменклатуры25СрезПоследних
		|ГДЕ
		|	ЦеныНоменклатуры25СрезПоследних.Номенклатура В (&Номенклатура)
		|	И ЦеныНоменклатуры25СрезПоследних.ВидЦены = &ВидЦены";
	Иначе
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура,
		|	ЦеныНоменклатурыСрезПоследних.ВидЦены,
		|	ЦеныНоменклатурыСрезПоследних.Цена
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних КАК ЦеныНоменклатурыСрезПоследних
		|ГДЕ
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура В (&Номенклатура)
		|	И ЦеныНоменклатурыСрезПоследних.ВидЦены = &ВидЦены";
	КонецЕсли;
	
	ПараметрЗапросаСписокНоменклатуры = ТаблицаКорзина.ВыгрузитьКолонку("Номенклатура");
	Запрос.УстановитьПараметр("Номенклатура", ПараметрЗапросаСписокНоменклатуры);
	Запрос.УстановитьПараметр("ВидЦены", ВидЦены);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаРезультатаЗапроса = РезультатЗапроса.Выгрузить();
	
	Для Каждого Элемент Из ТаблицаКорзина Цикл
		СтрокаВыборки = ВыборкаРезультатаЗапроса.Найти(Элемент.Номенклатура);
		Если ЗначениеЗаполнено(СтрокаВыборки) тогда
			Элемент.Цена = СтрокаВыборки.Цена;
			Элемент.Сумма = Элемент.Цена * Элемент.Количество;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаКорзина;
	
КонецФункции

// Функция печати табличного документа розничного заказа
// 
// Возвращаемое значение:
//  ТабличныйДокумент - Печатать заказ сервер
Функция ПолучитьТабличныйДокументаЗаказа() Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Если Не Проведен Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТабличныйДокумент = Новый ТабличныйДокумент();
	
	Макет = Документы.РТЗ_РозничныйЗаказ.ПолучитьМакет("Заказ");
	
	ОбластьШапка  = Макет.ПолучитьОбласть("Заказ|Шапка");
	ОбластьСтрока = Макет.ПолучитьОбласть("Заказ|Строка");
	ОбластьПодвал = Макет.ПолучитьОбласть("Заказ|Подвал");
	
	ШтрихкодПустой = ОбластьШапка.Рисунки.Штрихкод;
	РисунокШтрихкода = ПолучитьШтрихкод(ШтрихкодПустой.Ширина + ШтрихкодПустой.Ширина * 0.25, 
										ШтрихкодПустой.Высота + ШтрихкодПустой.Высота * 0.25, 4);
					
	ОбластьШапка.Рисунки.Штрихкод.Картинка = РисунокШтрихкода;
	ОбластьШапка.Параметры.НомерЗаказа = "Заказ №" + Номер;
	ТабличныйДокумент.Вывести(ОбластьШапка);
	
	ТаблицаДляВывода = Корзина.Выгрузить(); 
	ТаблицаДляВывода.Свернуть("Номенклатура,Упаковка", "Количество");
	ТаблицаДляОбхода = ЗаполнитьКолонкиЦенаИСумма(ТаблицаДляВывода);
	
	Параметры = ОбластьСтрока.Параметры;
	Для Каждого ЭлементТаблица Из ТаблицаДляОбхода Цикл
		
		Параметры.Артикул			= ЭлементТаблица.Номенклатура.Артикул;
		Параметры.Номенклатура  	= ЭлементТаблица.Номенклатура;
		
		Упаковка = ?(ЗначениеЗаполнено(ЭлементТаблица.Упаковка), ЭлементТаблица.Упаковка, "шт.");
		
		Параметры.ЦенаXКоличество 
			= Строка(ЭлементТаблица.Цена) + " руб." + " X " + Строка(ЭлементТаблица.Количество) + " (" + Упаковка + ")";
		
		ТабличныйДокумент.Вывести(ОбластьСтрока);
		
	КонецЦикла;
		
	ОбластьПодвал.Параметры.Сумма = Строка(ПолучитьСуммуПоДокументу(ТаблицаДляОбхода)) + " " + "руб.";
	ТабличныйДокумент.Вывести(ОбластьПодвал);
	
	Наименование = "ЗаказРозничный_"+Номер;
	
	ТабличныйДокумент.ИспользуемоеИмяФайла = Наименование;
	ТабличныйДокумент.ИмяСохраненияПоложенияОкна = Наименование;
	ТабличныйДокумент.ТолькоПросмотр = Истина;
	ТабличныйДокумент.ОтображатьСетку = Ложь;
	ТабличныйДокумент.АвтоМасштаб = Ложь;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Получить сумму по таблице с ценой.
// 
// Параметры:
//  ТаблицаКорзина - ТаблицаЗначений - Таблица корзина:
// * Сумма - Число
// * Цена - Число
// 
// Возвращаемое значение:
//  Число - Получить сумму по таблице с ценой
Функция ПолучитьСуммуПоДокументу(ТаблицаКорзина)
	
	Если ТаблицаКорзина.Колонки.Найти("Количество") = Неопределено
	Или  ТаблицаКорзина.Колонки.Найти("Цена") = Неопределено Тогда
		Возврат 0;
	КонецЕсли;
	
	Сумма = 0;
	
	Для Каждого Строка Из ТаблицаКорзина Цикл
		Сумма = Сумма + Строка.Цена * Строка.Количество;
	КонецЦикла;
	
	Возврат Сумма;
	
КонецФункции

// Получает изображение штрихкода
// 
// Параметры:
//  ШиринаШтрихкода - Число - значение ширины штрихкода
//  ВысотаШтрихкода - Число - значение высоты штрихкода
//  ЗначШтрихкод - Строка - Входные данные
//  ЗначТипШтрихкода - Число - тип штрих кода по документации
//  
//  Возвращаемое значение:
//   - Картинка
Функция ПолучитьШтрихкод(ШиринаШтрихкода, ВысотаШтрихкода, ЗначТипШтрихкода) Экспорт
	
	ПараметрыШтрихкода = ГенерацияШтрихкода.ПараметрыГенерацииШтрихкода();
	
	ПараметрыШтрихкода.Ширина = ШиринаШтрихкода;
	ПараметрыШтрихкода.Высота = ВысотаШтрихкода;
	ПараметрыШтрихкода.ТипКода = ЗначТипШтрихкода;
	ПараметрыШтрихкода.Штрихкод = Документы.РТЗ_РозничныйЗаказ.ЗакодироватьНомер(Номер);
	ПараметрыШтрихкода.ПрозрачныйФон = Истина;
	ПараметрыШтрихкода.УровеньКоррекцииQR = 2;
	ПараметрыШтрихкода.ОтображатьТекст = Ложь;
	ПараметрыШтрихкода.Масштабировать = Истина;
	ПараметрыШтрихкода.СохранятьПропорции = Истина;
	ПараметрыШтрихкода.ВертикальноеВыравнивание  = 1;
	ПараметрыШтрихкода.GS1DatabarКоличествоСтрок = 1;
	ПараметрыШтрихкода.ТипВходныхДанных = 0;
	
	РезультатШтрихкод = ГенерацияШтрихкода.ИзображениеШтрихкода(ПараметрыШтрихкода);
	
	Возврат РезультатШтрихкод.Картинка;

КонецФункции

#КонецЕсли

#КонецОбласти












